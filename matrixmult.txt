        program matrixmult

        implicit none
        real :: x
        integer ::  i ,j, k, dimsize, clock_start, clock_end, clock_rate, clock_start2, clock_end2
        integer, dimension(2000,2000) :: a, b, c
        dimsize = size(a(:,1))
       
        do i= 1,dimsize     !giving a and b random number values 
            do j=1,dimsize
            call RANDOM_NUMBER(x)
            a(i,j) = x
            call RANDOM_NUMBER(x)
            b(i,j) = x
            end do
        end do

	call system_clock(count_rate = clock_rate)

        call system_clock(clock_start)
        do i = 1, dimsize
          do j = 1, dimsize
           c(i,j) = 0;
             do k = 1, dimsize
               c(i,j) = c(i,j) + a(i,k)*b(k,j)
             end do
          end do
        end do
        call system_clock(clock_end)

        print *,"time for the ijk implementation:",(clock_end-clock_start)/REAL(clock_rate)

        call system_clock(count_rate = clock_rate)


        call system_clock(clock_start)
        do i = 1, dimsize
            do j = 1, dimsize
              c(i,j) = dot_product(a(i,:),b(:,j))
            end do
        end do
        call system_clock(clock_end)
        print *,"time for the dotprod implementation:",(clock_end-clock_start)/REAL(clock_rate)

        call system_clock(clock_start)

        ctransp = MATMUL(a,b) 

        call system_clock(clock_end)
        print *,"time for the MATMUL implementation:",(clock_end-clock_start)/REAL(clock_rate)

	!Summary
	!..... Ashok, write your summary of what you find here
